{
	"info": {
		"_postman_id": "07344273-2664-4a77-9527-8596c61a2518",
		"name": "Methods",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45027133",
		"_collection_link": "https://davidmondrusov-6807300.postman.co/workspace/David-Mondrusov's-Workspace~9b7ae9aa-c9ec-4a91-88dc-8302af908aba/collection/45027133-07344273-2664-4a77-9527-8596c61a2518?action=share&source=collection_link&creator=45027133"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "List All Users",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A name is returned\", () => {",
									"    pm.expect(pm.response.json()).to.have.property('name');",
									"    pm.expect(pm.response.json().name).to.be.a('string');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Username\": \"test\",\n    \"Password\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
					},
					"response": []
				},
				{
					"name": "Register",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Username\": \"jane_doe\",\n    \"Email\": \"jane.doe@example.com\",\n    \"Password\": \"securePassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unregister",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200 OK status\", () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/auth/users/67bcf55f1a01c7732cc9b22c",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"users",
								"67bcf55f1a01c7732cc9b22c"
							]
						},
						"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Server-Side Request Forgery (SSRF)",
			"item": [
				{
					"name": "SSRF Vuln",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/ssrf/vuln?uri=http://localhost:5001/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"ssrf",
								"vuln"
							],
							"query": [
								{
									"key": "uri",
									"value": "http://localhost:5001/api/users"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SSRF Solution",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/ssrf/solution?uri=http://localhost:5001/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"ssrf",
								"solution"
							],
							"query": [
								{
									"key": "uri",
									"value": "http://localhost:5001/api/users"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Regex Denial of Service (ReDos)",
			"item": [
				{
					"name": "ReDos Vuln",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/redos/vuln?phone=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112222222222222222222222222222222222222222X",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"redos",
								"vuln"
							],
							"query": [
								{
									"key": "phone",
									"value": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112222222222222222222222222222222222222222X"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ReDos Solution",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/redos/solution?phone=111111111111111111111112222222222222222222222222222222222222222X",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"redos",
								"solution"
							],
							"query": [
								{
									"key": "phone",
									"value": "111111111111111111111112222222222222222222222222222222222222222X"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Path Traversal",
			"item": [
				{
					"name": "PathTraversal Vuln",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/pathTraversal/vuln?filename=/etc/passwd",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"pathTraversal",
								"vuln"
							],
							"query": [
								{
									"key": "filename",
									"value": "/etc/passwd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PathTraversal Solution",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/api/pathTraversal/solution?filename=/etc/password",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"pathTraversal",
								"solution"
							],
							"query": [
								{
									"key": "filename",
									"value": "/etc/password"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}